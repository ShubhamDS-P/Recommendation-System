# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tac--Aj36iZuSKqTQPnaE7KYiYoY1LTJ
"""

from google.colab import drive 

drive.mount('/content/drive')

downloaded = drive.CreateFile({'id':''})

import pandas as pd
from google.colab import files
# importing Datasets

book = files.upload()

book = pd.read_csv('book.csv',encoding = "ISO-8859-1")
book.shape

from sklearn.feature_extraction.text import TfidfVectorizer

# We will create tfidf vectorizer to remove all the stop words
tfidf = TfidfVectorizer(stop_words="english")  # Taking stop words from tfidf vectorizer

# Column names
book.columns   # column names need to be changed for easy access in the further code

#changing column names
book.columns = ['srno', 'user_id', 'book_title', 'book_rating']
book.columns

# checking the empty strings in the column
book["book_title"].isnull().sum()
#There are no null data in the columns so we will continue with the tfidfvectorizer.

# Preparing the Tfidf matrix by fitting and transforming

tfidf_matrix_book = tfidf.fit_transform(book.book_title)   #Transform a count matrix to a normalized tf or tf-idf representation
tfidf_matrix_book.shape

# with the above matrix we need to find the 
# similarity score
# There are several metrics for this
# such as the euclidean, the Pearson and 
# the cosine similarity scores

# For now we will be using cosine similarity matrix
# A numeric quantity to represent the similarity 
# between 2 movies 
# Cosine similarity - metric is independent of 
# magnitude and easy to calculate 

# cosine(x,y)= (x.y‚ä∫)/(||x||.||y||)
from sklearn.metrics.pairwise import linear_kernel

# Computing the cosine simillarity matrix
cosine_sim_matrix_book = linear_kernel(tfidf_matrix_book,tfidf_matrix_book)

# Creating the mapping of book names to index number
book_index = pd.Series(book.index,index=book['book_title']).drop_duplicates()
book_index["Jane Doe"]
book_index.head()

import numpy as np

def get_book_recommendations(book_title,topN):
  book_id = book_index[book_title]
    # Getting the pair wise similarity score for all the book's with that 
    # book
  cosine_score_book = list(enumerate(cosine_sim_matrix_book[book_index]))
     # Sorting the cosine_similarity scores based on scores 
  cosine_score_book = sorted(np.any(cosine_score_book,key=lambda x:x[1],reverse = True))
    # Get the scores of top 10 most similar books 
  cosine_score_book_10 = cosine_scores_book[0:topN+1]
      # Getting the book index 
  book_idx  =  [i[0] for i in cosine_score_book_10]
  book_scores =  [i[1] for i in cosine_score_book_10]
    # Simillar books and scores
  simillar_books = pd.DataFrame(columns=["book_title","Score","book_rating"])
  simillar_books["book_title"] = book.loc[book_idx,"book_title"]
  simillar_books["Score"] = book_scores
  simillar_books["book_rating"] = book.loc[book_idx,"book_rating"]
  simillar_books.reset_index(inplace = True)
  simillar_books.drop(["index"],axis=1,inplace=True)
  simillar_books.sort_values(by=['book_rating','Score'])
  print(simillar_books)

get_book_recommendations("Jane Doe", topN=10)